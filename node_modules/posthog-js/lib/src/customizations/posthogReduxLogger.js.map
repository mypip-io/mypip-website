{"version":3,"file":"posthogReduxLogger.js","sourceRoot":"","sources":["../../../src/customizations/posthogReduxLogger.ts"],"names":[],"mappings":"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","sourcesContent":["import { BucketedRateLimiter, isNullish, isObject, isUndefined, Logger } from '@posthog/core'\nimport { createLogger } from '../utils/logger'\nimport type { PostHog } from '../posthog-core'\n\n// types copied from redux toolkit so we can avoid taking a dependency in the library and confusing people using the SDK\n\n/**\n * An *unknown* action.\n * This is the most minimal possible shape for an action.\n * Allows for type-safe usage of actions without dependencies.\n */\nexport interface UnknownAction {\n    type: string\n    [extraProps: string]: unknown\n}\n\n/**\n * A *dispatching function* (or simply *dispatch function*) is a function that\n * accepts an action or an async action; it then may or may not dispatch one\n * or more actions to the store.\n */\nexport interface Dispatch<A extends UnknownAction = UnknownAction> {\n    <T extends A>(action: T): T\n}\n\n/**\n * A middleware is a higher-order function that composes a dispatch function\n * to return a new dispatch function. It often turns async actions into\n * actions.\n *\n * This matches Redux Toolkit's Middleware interface for compatibility.\n */\nexport interface ReduxMiddleware<\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-object-type\n    _DispatchExt = {},\n    S = any,\n    D extends Dispatch = Dispatch,\n> {\n    (api: MiddlewareAPI<D, S>): (next: (action: unknown) => unknown) => (action: unknown) => unknown\n}\n\n/**\n * A middleware API is an object containing the store's dispatch function and getState function.\n * A middleware is given the middleware API as its first parameter.\n */\nexport interface MiddlewareAPI<D extends Dispatch = Dispatch, S = any> {\n    dispatch: D\n    getState(): S\n}\n\n// end of copied types\n\nexport interface StateEvent {\n    type: string\n    payload?: any\n    timestamp: number\n    executionTimeMs?: number\n    prevState: any\n    nextState: any\n}\n\nexport type PostHogStateLogger = (title: string, stateEvent: StateEvent) => void\n\nexport interface PostHogStateLoggerConfig<S = any> {\n    maskAction?: (action: UnknownAction) => UnknownAction | null\n    maskState?: (state: S, action?: UnknownAction) => S\n    titleFunction?: (stateEvent: StateEvent) => string\n    logger?: PostHogStateLogger\n    diffState?: boolean\n    /**\n     * actions logging is token bucket rate limited to avoid flooding\n     * this controls the rate limiter's refill rate, see BucketedRateLimiter docs for details\n     * normally this is only changed with posthog support assistance\n     */\n    rateLimiterRefillRate?: number\n    /**\n     * actions logging is token bucket rate limited to avoid flooding\n     * this controls the rate limiter's bucket size, see BucketedRateLimiter docs for details\n     * normally this is only changed with posthog support assistance\n     */\n    rateLimiterBucketSize?: number\n}\n\n/**\n * Default title function for Redux events\n */\nfunction defaultTitleFunction(stateEvent: StateEvent): string {\n    const { type, executionTimeMs } = stateEvent\n    const timeText = isNullish(executionTimeMs) ? '' : ` (${executionTimeMs.toFixed(2)}ms)`\n    return `${type}${timeText}`\n}\n\n// we need a posthog logger for the rate limiter\nconst phConsoleLogger: Logger = createLogger('[PostHog Action RateLimiting]')\n\nexport function browserConsoleLogger(title: string, stateEvent: StateEvent): void {\n    // but the posthog logger swallows messages unless debug is on\n    // so we don't want to use it in this default logger\n    // eslint-disable-next-line no-console\n    console.log(title, stateEvent)\n}\n\n/**\n * Logger that sends state events to PostHog session recordings\n * Requires that the loaded posthog instance is provided\n * And returns the function to use as the logger\n *\n * e.g. const config = { logger: sessionRecordingLoggerForPostHogInstance(posthog) }\n */\nexport const sessionRecordingLoggerForPostHogInstance: (posthog: PostHog) => PostHogStateLogger =\n    (postHogInstance: PostHog) =>\n    (title: string, stateEvent: StateEvent): void => {\n        postHogInstance?.sessionRecording?.tryAddCustomEvent('app-state', { title, stateEvent })\n    }\n\n/**\n * Get only the changed keys from two states\n * NB exported for testing purposes only, not part of the public API and may change without warning\n *\n * Returns { prevState: changedKeysOnly, nextState: changedKeysOnly }\n */\nexport function getChangedStateKeys<S>(\n    prevState: S,\n    nextState: S,\n    maxDepth: number = 3\n): { prevState?: Partial<S>; nextState?: Partial<S> } {\n    // Fast bailouts\n    if (prevState === nextState) return { prevState: {}, nextState: {} }\n    if (!prevState || !nextState) return { prevState: prevState as Partial<S>, nextState: nextState as Partial<S> }\n    if (typeof prevState !== 'object' || typeof nextState !== 'object') return {}\n    if (maxDepth <= 0) return { prevState: prevState as Partial<S>, nextState: nextState as Partial<S> }\n\n    const prev: any = {}\n    const next: any = {}\n    let hasChanges = false\n\n    // Single pass: check all keys from both objects\n    const allKeys = new Set([...Object.keys(prevState), ...Object.keys(nextState)])\n\n    for (const key of allKeys) {\n        const prevVal = (prevState as any)[key]\n        const nextVal = (nextState as any)[key]\n\n        if (prevVal === nextVal) continue // No change\n\n        hasChanges = true\n\n        // Handle missing keys\n        if (isUndefined(prevVal)) {\n            next[key] = nextVal\n            continue\n        }\n        if (isUndefined(nextVal)) {\n            prev[key] = prevVal\n            continue\n        }\n\n        // For objects, recurse once more, otherwise treat as primitive\n        if (isObject(prevVal) && isObject(nextVal)) {\n            const nested = getChangedStateKeys(prevVal, nextVal, maxDepth - 1)\n\n            // Only include if there are actual changes\n            if (nested.prevState && Object.keys(nested.prevState).length > 0) prev[key] = nested.prevState\n            if (nested.nextState && Object.keys(nested.nextState).length > 0) next[key] = nested.nextState\n        } else {\n            // Primitive or array - include both values\n            prev[key] = prevVal\n            next[key] = nextVal\n        }\n    }\n\n    return hasChanges ? { prevState: prev, nextState: next } : { prevState: {}, nextState: {} }\n}\n\n// Debounced logger for rate limit messages\nconst createDebouncedActionRateLimitedLogger = () => {\n    let timeout: ReturnType<typeof setTimeout> | null = null\n    let ignoredCount = 0\n    let lastActionType: string | null = null\n\n    return {\n        info: (actionType: string) => {\n            if (lastActionType !== actionType) {\n                // Reset counter when action type changes\n                ignoredCount = 0\n                lastActionType = actionType\n            }\n\n            ignoredCount++\n\n            if (timeout) {\n                clearTimeout(timeout)\n            }\n\n            timeout = setTimeout(() => {\n                const count = ignoredCount\n\n                if (count === 1) {\n                    phConsoleLogger.info(`action \"${actionType}\" has been rate limited`)\n                } else {\n                    phConsoleLogger.info(`action \"${actionType}\" has been rate limited (${count} times)`)\n                }\n\n                ignoredCount = 0\n                timeout = null\n            }, 1000)\n        },\n    }\n}\n\nconst debouncedActionRateLimitedLogger = createDebouncedActionRateLimitedLogger()\n\n/**\n * Creates a Kea plugin that logs actions and state changes to a provided logger\n * This can be used as a plugin in any Kea setup to capture state changes\n */\nexport function posthogKeaLogger<S = any>(config: PostHogStateLoggerConfig<S> = {}) {\n    const middleware = posthogReduxLogger(config)\n\n    return {\n        name: 'posthog-kea-logger',\n        events: {\n            beforeReduxStore(options: any) {\n                options.middleware.push(middleware)\n            },\n        },\n    }\n}\n\n/**\n * Creates a Redux middleware that logs actions and state changes to a provided logger\n * This can be used as middleware in any Redux store to capture state changes\n *\n * The logging uses token-bucket rate limiting to avoid flooding the logging with many changes\n * by default logging rate limiting captures ten action instances before rate limiting by action type\n * refills at a rate of one token / 1-second period\n * e.g. will capture 1 rate limited action every 1 second until the burst ends\n */\nexport function posthogReduxLogger<S = any>(\n    config: PostHogStateLoggerConfig<S> = {}\n    // the empty object is the recommended typing from redux docs\n    //eslint-disable-next-line @typescript-eslint/no-empty-object-type\n): ReduxMiddleware<{}, S> {\n    const {\n        maskAction,\n        maskState,\n        titleFunction = defaultTitleFunction,\n        logger = browserConsoleLogger,\n        diffState = true,\n        rateLimiterRefillRate = 1,\n        rateLimiterBucketSize = 10,\n    } = config\n\n    const rateLimiter: BucketedRateLimiter<string> = new BucketedRateLimiter({\n        refillRate: rateLimiterRefillRate,\n        bucketSize: rateLimiterBucketSize,\n        refillInterval: 1000, // one second in milliseconds,\n        _logger: phConsoleLogger,\n    })\n\n    return (store: MiddlewareAPI<Dispatch, S>) =>\n        (next: (action: unknown) => unknown) =>\n        (action: unknown): unknown => {\n            const typedAction = action as UnknownAction\n            // Get the state before the action\n            const prevState = store.getState()\n\n            // Track execution time\n            // eslint-disable-next-line compat/compat\n            const startTime = performance.now()\n\n            const result = next(typedAction)\n\n            // eslint-disable-next-line compat/compat\n            const endTime = performance.now()\n            const executionTimeMs = endTime - startTime\n\n            // Get the state after the action\n            const nextState = store.getState()\n\n            const maskedAction = maskAction ? maskAction(typedAction) : typedAction\n\n            if (!maskedAction) {\n                return result\n            }\n\n            const isRateLimited = rateLimiter.consumeRateLimit(typedAction.type)\n\n            if (isRateLimited) {\n                debouncedActionRateLimitedLogger.info(typedAction.type)\n            } else {\n                // Apply masking to states\n                try {\n                    const maskedPrevState = maskState ? maskState(prevState, maskedAction) : prevState\n                    const maskedNextState = maskState ? maskState(nextState, maskedAction) : nextState\n\n                    type FilteredState = { 'invalid state'?: string } | (S & Record<string, any>)\n                    let filteredPrevState: FilteredState\n                    let filteredNextState: FilteredState\n                    if (diffState) {\n                        const { prevState: diffedPrevState, nextState: diffedNextState } = getChangedStateKeys(\n                            maskedPrevState,\n                            maskedNextState\n                        )\n                        const invalidPayloadForDiffing: FilteredState = { 'invalid state': 'no changes after diffing' }\n                        filteredPrevState = (diffedPrevState as FilteredState) ?? invalidPayloadForDiffing\n                        filteredNextState = (diffedNextState as FilteredState) ?? invalidPayloadForDiffing\n                    } else {\n                        const invalidPayloadForLogging = { 'invalid state': 'logger only supports object payloads' }\n                        filteredPrevState = isObject(maskedPrevState) ? maskedPrevState : invalidPayloadForLogging\n                        filteredNextState = isObject(maskedNextState) ? maskedNextState : invalidPayloadForLogging\n                    }\n\n                    const { type, ...actionData } = maskedAction\n\n                    const reduxEvent: StateEvent = {\n                        type,\n                        payload: actionData,\n                        timestamp: Date.now(),\n                        executionTimeMs,\n                        prevState: filteredPrevState,\n                        nextState: filteredNextState,\n                    }\n\n                    const title = titleFunction(reduxEvent)\n                    logger(title, reduxEvent)\n                } catch (e: any) {\n                    // logging should never throw errors and break someone's app\n                    phConsoleLogger.error('Error logging state:', e)\n                }\n            }\n\n            return result\n        }\n}\n"]}